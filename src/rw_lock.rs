use std::sync::RwLock;

pub fn rw_lock() {
    println!("============== RwLock ================");
    /*
    Почему RwLock требует T: Send + Sync, а Mutex только T: Send?

    RwLock (Reader-Writer Lock) — это примитив синхронизации, который позволяет:
        Множество одновременных читателей (shared access)
        Только одного писателя (exclusive access)


        1. Для Mutex<T>:
            T: Send — гарантирует, что T можно безопасно перемещать между потоками
            Не требует Sync, потому что Mutex предоставляет эксклюзивный доступ:
            Даже если T не потокобезопасен (!Sync), Mutex обеспечивает безопасность
            В любой момент только один поток имеет доступ к данным

        2. Для RwLock<T>:
            T: Send — как и для Mutex, данные должны быть перемещаемы между потоками
            T: Sync — дополнительное требование, потому что:
            Множество читателей могут одновременно обращаться к данным
            Если T не является потокобезопасным (!Sync), это может привести к гонкам данных
            RwLock не обеспечивает эксклюзивность при чтении
    */

    let lock = RwLock::new(5);

    // множество читателей
    {
        let r1 = lock.read().unwrap(); // получаем read guard
        let r2 = lock.read().unwrap(); // можно получить ещё один
        println!("Readers: {}, {}", *r1, *r2);
    } // guards освобождаются здесь

    // один писатель
    {
        let mut w = lock.write().unwrap(); // получаем write guard
        *w += 1;
    } 
}